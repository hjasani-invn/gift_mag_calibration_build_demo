#ifndef FP_BUILDER_HPP
#define FP_BUILDER_HPP

#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <string>
#include <stdio.h>
#include <vector>
#include <regex>
#include <cstdint>
#include <sstream>
// WARNING: dirent.h is not provided with visual studio

#include "Fpbl.hpp"
#include "MfpBuilder.hpp"
#include "WiFiBuilder.hpp"
#include "BleBuilder.hpp"
#include "LocalData.hpp"
#include "MagCalibrators.hpp"
#include "MagReCalibrators.hpp"
#include "TrackProcessor.hpp"
#include "SettingsParser.hpp"
#include "fpeDataTypes.h"


// PATCH__IGNORE_CALIBRATED_DATA_AVALIABILITY_FLAG description:
//    This patch disables checking of calibrated_data_available_ field of Magnetic Data Entity of IRL binary file.
//    As result all magnetic data from the file will be used in MFP buildung
//    This is temporary patch becouse calibrated_data_available_ is defined but is not provided now in IRL dat files generated by IRL library
//#define PATCH__IGNORE_CALIBRATED_DATA_AVALIABILITY_FLAG     0

#ifdef _WIN32
#define  SLASH "\\"
#define  ENDL "\n"
#else
#include <limits.h>
#define  SLASH "/"
#define  ENDL "\r\n"
#endif

#define DEBUG_OUTPUT__IRL_MAG_DATA                          0
#define DEBUG_OUTPUT__IRL_MAG_DATA_AFTER_PREPROCESSING      0
#define DEBUG_OUTPUT__IRL_WIFI_DATA                         0
#define DEBUG_OUTPUT__IRL_BLE_DATA                          0

#define DEBUG_OUTPUT__HEADING_LOG                           0

#define ENABLE_MAG_CALIBRATION                              0

#define ENABLE_SECOND_PARSE									0
#define NUMBER_OF_RECALIB_ITERATIONS						3
#define ENABLE_MAG_RECALIBRATION                            1

const RecalibrationWeightMethod WEIGHT_RECALIBRATION_METHOD = WEIGHTED_STD_MAG_XYZ;

//#define DEBUG_INPUT__RAW_MAGNETIC_DATA_ON                   0
#define DEBUG_INPUT__USE_ROUTE_IRL_DATA                     0

#define ALLOW_WIFI_DATA_FROM_IRL                             1
#define ALLOW_WIFI_DATA_FROM_MAPPER_LOG                      1

#define ALLOW_BLE_DATA_FROM_IRL                              1
#define ALLOW_BLE_DATA_FROM_MAPPER_LOG                       1

// new features
#define WIFI_STUCK_SCANS_REJECTION                           0

//#define BLE_SCAN_PERIOD   4000 // ms; scaning period of BLE sensor

namespace FPBuilderConsole
{
    /**
    * Structure for data read from mag_out.txt files
    */
    struct TrackFiles
    {
        bool have_pos = false;
        bool have_mg = false;
        bool have_wifi = false;
        bool have_ble = false;
        bool have_irl = false;
        bool have_mag_out = false;

		std::string pos = "";
		std::string mg = "";
		std::string wifi = "";
		std::string ble = "";
		std::string irl = "";
		std::string mag_out = "";
		std::string mbias = "";
    };

    struct WiFiLoggingData
    {
        struct WiFiData
        {
            int count_of_scans;
            int count_of_messages;
            int count_of_APs;
        };
        WiFiData  loaded_data;
        WiFiData  processed_data;

        void print_header(std::ostream& os, std::string str)
        {
            os << std::endl << str << std::endl;
        }

        void print(std::ostream& os, std::string str)
        {
            os /*<< std::endl*/ << str << " , ";
            os << loaded_data.count_of_scans << " , " << loaded_data.count_of_messages << " , " << loaded_data.count_of_APs << " , "
                << processed_data.count_of_scans << " , " << processed_data.count_of_messages << " , " << processed_data.count_of_APs << std::endl;
        }
    };

    class FP_builder
    {
        public:
            FP_builder(std::string name,
                jsonVenue &ven,
                Fpbl::Grid &mag_grid,
                Fpbl::Grid &wifi_grid,
                Fpbl::Grid &ble_grid,
                Fpbl::FPGrid &magnetic_fp,
                Fpbl::FPGrid &wifi_f,
                Fpbl::FPGrid &ble_fp,
                bool   &bleProxEnable,
                std::string &default_mag_validators,
                std::vector<std::string> &mag_validators,
                int mag_fp_format,
                int wifi_fp_format,
                int ble_fp_format,
                bool wifi_self_healing_mode,
                bool xblp_detection_mode,
                std::map<std::string, std::string> &file_masks
                );
            ~FP_builder();

            bool ProcessDatasetsAndBuildFingerprints( std::string grid_folder, std::string fp_bases_folder,
                std::string &in_mag_grid_file, std::string &in_wifi_grid_file, std::string &in_ble_grid_file, std::string &in_portals_grid_file,
			std::string &in_cs_grid_file, std::string &out_data_folder, std::string &out_mag_grid_file, std::string &out_wifi_grid_file, std::string &out_ble_grid_file,
                std::string &out_mag_fp_file, std::string &out_wifi_fp_file, std::string &out_ble_fp_file, std::string &in_ble_fprox_file,
                std::vector<std::vector<std::string>>);

			bool reparse_folders(std::string in_data_folder, std::string grid_folder, std::string &in_portals_grid_file, std::string &in_cs_grid_file,
                std::string fp_bases_folder, std::string &out_mag_grid_file, std::string &out_mag_fp_file, std::string &out_remag_grid_file,
                std::string &out_remag_fp_file, std::string validation_log_name,
                std::string revalidation_log_name, std::string out_rebias_file, Fpbl::RouteMode_t route_type, Fpbl::DataSetType dataset_type);
			
			bool parse_pos_att_file( std::string file_path, Fpbl::GridBuilder &Builder );
            bool parse_mg_file( std::string file_path, Fpbl::GridBuilder &Builder );
            //bool parse_wifi_file( std::string file_path, Fpbl::GridBuilder &Builder );
            bool parse_wifi_file(std::string file_path, std::vector<WiFiScanResult > & wifiScanResults);
            bool parse_ble_file(std::string file_path, std::vector<BleScanResult>  & bleScanResults);
            bool parse_mbias_file(std::string file_path, TrackPreProcessing::MagBias &mag_data);
            bool parse_mag_out_file(std::string file_path, TrackPreProcessing::MagBias &mag_data);
            bool save_mag_out_file(std::string file_path, TrackPreProcessing::MagBias &magbias);
            bool parse_irl_file(std::string file_path, std::vector<TpnOutput> &irl_data, bool read_calibrated_mag_data);
            bool parse_irl_file_for_wifi(std::string file_path, std::vector<WiFiScanResult > & wifiScanResults);
            bool parse_irl_file_for_ble(std::string file_path, std::vector<BleScanResult > & bleScanResults);
            bool apply_mag_bias(const TrackPreProcessing::MagBias mag_bias, std::vector<TpnOutput> &irl_data);
            uint8_t get_mag_calibration_level(const std::vector<TpnOutput> &irl_data);
            bool parse_ble_proximity_db_file(std::string file_path, std::vector<std::string> & ble_proximity_db);

            bool blp_data_statistics(const std::string file_path, std::vector<BleScanResult > & bleScanResults);

            size_t clear_repeatable_measurements(std::vector<WiFiScanResult > & wifiScanResults);
            std::vector<WiFiScanResult > make_scans(const std::vector<WiFiScanResult > & wifiMeas, std::vector<WiFiScanResult > & wifiScans, int64_t scan_period);
            size_t apply_wifi_list(std::vector<WiFiScanResult > & wifiScanResults, std::vector <std::pair<uint64_t, uint64_t>> ignore_list, bool white_list_request);
            size_t remove_stuck_scans(std::vector<WiFiScanResult > & wifiMeas);

            //bool clear_repeatable_measurements(std::vector<BleScanResult > & bleScanResults);

            TrackFiles ProcesDataSet(std::string folder_name, TrackPreProcessing::DataSetParams dataset_params, std::ofstream &validation_log, 
                std::ofstream &mag_bias_stream, Fpbl::GridBuilder &Builder, TrackPreProcessing::TrackProcessor &track_processor, Fpbl::RouteMode_t route_type = Fpbl::NormalMode, Fpbl::DataSetType dataset_type = Fpbl::kSurveyData,
                bool override_mag_out_file_mask = false, std::regex new_mag_out_file_mask = std::regex(""));
            bool CalculateMagBiasForDataset(std::vector<TpnOutput> &irl_data, TrackPreProcessing::MagBias& magbias);
			bool ReCalculateMagBiasForDataset(std::vector<TpnOutput> &irl_data, TrackPreProcessing::MagBias& magbias);

            void send_data_to_builder(std::vector<TpnOutput> irl_data, Fpbl::DataSetType dataset_type, Fpbl::GridBuilder &Builder);

            bool load_mag_grid_file(const std::string &fname, const BaseVenueType &venue, const Fpbl::Grid &mag_grid_param, Fpbl::MagneticGrid     &magnetic_grid);
            bool load_wifi_grid_file(const std::string &fname, const BaseVenueType &venue, const Fpbl::Grid &wifi_grid_param, Fpbl::WiFiGrid     &wifi_grid);
            bool load_ble_grid_file(const std::string &fname, const BaseVenueType &venue, const Fpbl::Grid &ble_grid_param, Fpbl::BleGrid     &ble_grid);
            bool load_portals_grid_file(const std::string &fname, const BaseVenueType &venue, const Fpbl::Grid &mag_grid_param, Fpbl::PortalsGrid     &portals_grid);
			bool load_cs_grid_file(const std::string &fname, const BaseVenueType &venue, const Fpbl::Grid &mag_grid_param, Fpbl::CSGrid &cs_grid);

            Fpbl::ReturnStatus saveMagneticGrid(const std::string &fname, Fpbl::MagneticGrid &magnetic_grid);
            void saveWiFiGrid( const std::string &fname, Fpbl::WiFiGrid &wifi_grid );
            void saveWiFiGridForMatlab(const std::string &fname, Fpbl::WiFiGrid   &wifi_grid);
            void saveBleGrid(const std::string &fname, Fpbl::BleGrid &ble_grid);
            void savePortalsGrid(const std::string &fname, Fpbl::PortalsGrid  &portals_grid);
			void saveCSGrid(const std::string &fname, Fpbl::CSGrid  &cs_grid);

            Fpbl::ReturnStatus saveMagneticDB(const std::string &fname, Fpbl::MfpBuilder::LocalDB dbmfp, int mag_fp_format);
            Fpbl::ReturnStatus saveWiFiDb(const std::string &fname, Fpbl::WiFiBuilder::LocalDB db, int wifi_fp_format);
            Fpbl::ReturnStatus saveBleDb(const std::string &fname, Fpbl::BleBuilder::LocalDB db, int ble_fp_format);

            Fpbl::ReturnStatus saveBleProximityDb(const std::string &fname, void* dbbprox, int ble_fp_format);

            long GetFileSize( std::string filename );

            uint32_t GetDatasetID(std::string filename);

            WiFiLoggingData::WiFiData wifi_logging(const std::vector<WiFiScanResult > & wifiMeas);

            WiFiLoggingData::WiFiData ble_logging(const std::vector<BleScanResult > bleScanResults);

			Fpbl::ReturnStatus loadMagneticDB(const std::string &fname, Fpbl::MfpBuilder::LocalDB &dbmfp, int mag_fp_format);

			size_t remove_small_gaps_in_mag_data(std::vector<TpnOutput> &irl_data);

    private:
            std::string FPname;
            //BaseVenueType venue;
            jsonVenue venue;

            //Fpbl::Grid venue_grid;
            Fpbl::Grid mag_grid;
            Fpbl::Grid wifi_grid;
            Fpbl::Grid ble_grid;
            Fpbl::FPGrid mag_fp;
            Fpbl::FPGrid wifi_fp;
            Fpbl::FPGrid ble_fp;
            bool   bleProxEnable;
            bool   bleEnableProxOnly;
            std::string  default_mag_validators;
            std::vector<std::string> mag_validators;
            std::vector<TrackPreProcessing::Fpp_pos_accuracy> pos_accuracy;
            int mag_fp_format;
            int wifi_fp_format;
            int ble_fp_format;
			Fpbl::MfpBuilder::LocalDB* pDbmfp;
            std::vector<std::string> ble_proximity_db;
            std::vector<std::uint64_t> ble_proximity_hashes_list;
            bool xblp_detection_mode;

            double start_delay;

            bool wifi_self_healing_mode;

            std::regex pos_att_file_mask;
            std::regex mg_file_mask;
            std::regex wifi_file_mask;
            std::regex ble_file_mask;
            std::regex irl_file_mask;
            std::regex mag_out_file_mask;
            std::regex mbias_file_mask;

            std::string in_file_mask;
            std::string default_in_file_mask;

            std::string mag_out_file;
			std::string remag_out_file;
			std::regex re_mag_out_file_mask;

            BSSID string_to_mac( std::string const &s );
            void  string_to_ble(std::string const &s, uint8_t *ble);

            double  default_blp_height;
            BleBeaconType default_blp_type;
            uint32_t ble_scan_period; // ms, ble scaning period

            WiFiLoggingData  wifi_log_data;
            WiFiLoggingData  ble_log_data;
            std::ofstream wifi_log;
            std::ofstream ble_log;
            std::ofstream ble_statistics_log;
            std::string   out_data_folder;
            Fpbl::DataSetType previous_dataset_type = Fpbl::kUnKnown;

            void parse_dataset_attr(std::string &attr, const char delim, std::string &name, std::string &value);

    };
}

#endif // FP_BUILDER_HPP
